[size=6][b]The Hankinator's UI library[/b][/size]

http://steamcommunity.com/sharedfiles/filedetails/?id=653673604

This is a rudimentary GUI library with the goal of simplicity but with flexibility. Only basic widgets are included, Label, Button, Checkbox and Combobox. This should satisfy the majority of GUI needs but if you come up with a good case to include others let me know. All widgets can be themed with images for beautification. THUI is built around groups of GUI elements. Every group has a name, this name is used to activate (make visible) when you need it to. Only one group can be active at a time. THUI contains helper functions so that you can ensure the GUI will scale and look similar on different resolutions. The easiest way to layout a menu system is to create a script for each group, then apply the scripts to pivots in your level. If you wish to design it so, you can use the flow graph to control how the user navigates between groups. It is fairly straight forward to create your own widgets that don't look so bland. 

To kick things off, I am going to start with required changes to Main.lua, a simple example, pause screen, journal, and finally the API reference. When I was thinking about this post, I was thinking I'd have more to say about each example but now that I've gotten to it, the ideas are gone. Please ask if things need additional clarification. I've put a lot of thought into the design of this library so that it could be used in the majority of use cases but if I have forgotten something obvious, please let me know!

Main.lua modifications:
It should be pretty trivial to make the same modifications to App.lua but I like Main.lua best and I don't want to spend time talking about App.lua. There is an example Main.lua in the examples directory with all these changes.

1) First thing is first, import THUI at the top of the file 
[CODE]
import "Addons/THUI/THUI.lua"
[/CODE]

2) Immediately after the context is created, initialize THUI
[CODE]
THUI:Initialize()
[/CODE]

3) Change the while loop not to exit when we hit escape, this is for our pause menu example
[CODE]
while not exit_game do
[/CODE]

4) Next we need to change the program flow to only update the time and the world when the game isn't paused.
[CODE]
if not paused then
    --Update the app timing
    Time:Update()
    
    --Update the world
    world:Update()
end
[/CODE]

5) Immediately after world:Render(), we need to update THUI
[CODE]
THUI:Update()
[/CODE]

Simple example:
This is a simple example of how to build a simple GUI screen with a label and a button. 
[CODE]
self.group = THUI:CreateGroup("hello_world", self, THUI.AUTOSCALE, 0, 0, 1023, 767)

local title = THUI.Label:Create(512, 50, 0, 0, "Hello World!", THUI.JUSTIFY.CENTER, THUI.JUSTIFY.MIDDLE)
title.font = 24

local button1 = THUI.Button:Create(512, 300, 200, 50, "A button")

self.group:Add(title)
self.group:Add(button1)
[/CODE]

[B]Pause screen example:[/B]
This script will pause the game when the user hits the escape key. This example is utilizing the ANCHOR functionality to position all widgets to the left middle of the screen. It is pretty straight forward but the interesting parts we do in this order:

1) We create the group
2) Create a label for the title
3) Create a Resume button
4) Set the click callback for the resume button
5) Create an Exit button
6) Set the click callback for the exit button
7) Add all the widgets to the group

[CODE]
import "Addons/THUI/THUI.lua"

function Script:Start()
    self.group = THUI:CreateGroup("pause_menu", self, THUI.AUTOSCALE, nil, nil, 1023, 767)

    self.group.update = THUI:Callback(self.UpdateUI, self, nil)

    local title_font = 24
    local title = THUI.Label:Create(512, 50, 0, 0, "Paused!", THUI.CENTER, THUI.MIDDLE)
    title.font = title_font

    local width = 200
    local button1 = THUI.Button:Create(512, 300, width, 50, "Resume", THUI.CENTER, THUI.MIDDLE)

    button1.click = THUI:Callback(self.ResumeButtonClicked, self)
    
    local exitbutton = THUI.Button:Create(512, 400, width, 50, "Exit", THUI.CENTER, THUI.MIDDLE)
    exitbutton.click = THUI:Callback(self.ExitButtonClicked, self)

    self.group:Add(title)
    self.group:Add(button1)
    self.group:Add(exitbutton)
end

function Script:ResumeButtonClicked(button)
    self:HideMenu()
end

function Script:ExitButtonClicked(button)
    exit_game = true
end

function Script:UpdateWorld()
    if window:KeyHit(Key.Escape) then
        if not paused then
            self:ShowMenu()
        end
    end
end

function Script:UpdateUI(group, arg)
    if window:KeyHit(Key.Escape) then
        if paused then
            self:HideMenu()
        end
    end
end

function Script:ShowMenu()
    THUI:PauseGame(true)
    THUI:Show("pause_menu")
end

function Script:HideMenu()
    THUI:PauseGame(false)
    THUI:Hide("pause_menu")

    --FPSPlayer.lua measures the distance from the middle of the screen to figure out how much
    --the player is trying to look so we need to reset it when the user is done with the UI
    local context = Context:GetCurrent()
    Window:GetCurrent():SetMousePosition(Math:Round(context:GetWidth()/2), Math:Round(context:GetHeight()/2))
end
[/CODE]


[B]Journal example:[/B]
This is a little bit more complicated. But the first thing we need to do is create the journal menu itself. This is pretty simple but I will leave it to you to make the fancy things :). In this script I create 10 buttons, each button is created with the active flag false so that it is greyed out. When the player picks up a journal entry, the button will be set to active and they can click on the button to view the entry. The Journal Entry script should be put on the object itself, like a piece of paper, cassette tape, or whatever.

Journal script:
[CODE]
import "Addons/THUI/THUI.lua"

function Script:Start()
    Journal = self --global that entries can use to add themselves

    self.pg = THUI:CreateGroup("journal", self, THUI.AUTOSCALE, nil, nil, 1023, 767)

    local font = 24
    local title = THUI.Label:Create(512, 50, 0, 0, "Journal", THUI.CENTER, THUI.MIDDLE)
    title.font = font

    local button1 = THUI.Button:Create(50, 700, 200, 50, "Resume")

    button1.click = THUI:Callback(self.ResumeButtonClicked, self)

    self.pg:Add(title)
    self.pg:Add(button1)
    
    self.entries = {}
    self.entry_buttons = {}

    for i=1, 10 do
        local b = THUI.Button:Create(512, 45 + 55 * i, 200, 50, "????", THUI.CENTER, THUI.MIDDLE)
        b.active = false
        b.click = THUI:Callback(self.EntryButtonClicked, self, i)
        self.pg:Add(b)
        self.entry_buttons[i] = b
    end

    self.journal_entry = THUI:CreateGroup("journal_entry", self)

end

function Script:UpdateWorld()
    if window:KeyHit(Key.J) then
        if not THUI:GamePaused() then
            THUI:PauseGame(true)
            THUI:Show(self.pg)
        end
    end
end

function Script:EntryButtonClicked(button, index)
    THUI:Hide("journal")
    THUI:Show(self.entries[index].grp.name)
end

function Script:ResumeButtonClicked(button)
    THUI:PauseGame(false)
    THUI:Hide(self.pg)

    --FPSPlayer.lua measures the distance from the middle of the screen to figure out how much
    --the player is trying to look so we need to reset it when the user is done with the UI
    local context = Context:GetCurrent()
    Window:GetCurrent():SetMousePosition(Math:Round(context:GetWidth()/2), Math:Round(context:GetHeight()/2))
end

function Script:AddJounalEntry(entry)
    self.entries[entry.index] = entry
    
    local b = self.entry_buttons[entry.index]
    b.active = true
    b.text = entry.title
end
[/CODE]

Journal entry script:
[CODE]
import "Addons/THUI/THUI.lua"

Script.index = 3
Script.title = "Entry 3"

function Script:Start()
    local font = 24

    local text = {
    "Day 45",
    "",
    "I have earned the Germans' trust.",
    "They still do not realize I am a bear."
    }

    self.grp = THUI:CreateGroup("entry1", self, THUI.AUTOSCALE, nil, nil, 1023, 767)

    local label = THUI.Label:Create(512, 10, 0, 0, self.title, THUI.CENTER, THUI.MIDDLE)
    label.font = font

    self.grp:Add(label)

    local y = 150
    local leading = THUI:GetFont(label.font):GetHeight() * 1.3
    for i=0, #text do
        label = THUI.Label:Create(512, y, 0, 0, text[i], THUI.CENTER, THUI.MIDDLE)
        label.font = font
        self.grp:Add(label)
        y = y + leading
    end

    local journal_button = THUI.Button:Create(100, 700, 200, 50, "Journal")
    journal_button.click = THUI:Callback(self.JournalButtonClick, self, nil)

    self.grp:Add(journal_button)
end

function Script:Use()
    Journal:AddJounalEntry(self)

    THUI:Show("entry1")
    THUI:PauseGame(true)
    self.entity:Hide()
end

function Script:JournalButtonClick(button, arg)
    THUI:Hide("entry1")
    THUI:Show("journal")
end
[/CODE]